// =========================================
//  DATABASE CONFIGURATION
// =========================================
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL") // Supabase connection URL
}

// =========================================
//  ENUMS (for structured consistency)
// =========================================
enum Role {
  ADMIN
  SUPER_ADMIN
  STUDENT
}

enum ComplaintStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  REJECTED
}

enum MessageStatus {
  SENT
  RECEIVED
  READ
}

enum NotificationType {
  INFO
  WARNING
  SUCCESS
}

// =========================================
//  USER MODELS
// =========================================

// Admin Model
model Admin {
  id                String           @id @default(cuid())
  fullName          String
  email             String           @unique
  username          String           @unique
  passwordHash      String
  phone             String?
  avatarUrl         String?
  department        String?
  role              Role             @default(ADMIN)
  dateJoined        DateTime         @default(now())
  lastLogin         DateTime?
  isActive          Boolean          @default(true)

  // Relations
  complaintsHandled Complaint[]
  messagesSent      ChatMessage[]    @relation("AdminSentMessages")
  messagesReceived  ChatMessage[]    @relation("AdminReceivedMessages")
  activityLogs      ActivityLog[]
  notifications     Notification[]
  analytics         AdminAnalytics?

  @@map("admins")
}

// Student Model
model Student {
  id                String           @id @default(cuid())
  matricNo          String           @unique
  fullName          String
  email             String           @unique
  phone             String?
  department        String
  level             String
  hostel            String?
  avatarUrl         String?
  status            String           @default("Active")
  joinedDate        DateTime         @default(now())
  passwordHash      String
  lastLogin         DateTime?
  totalComplaints   Int              @default(0)
  resolvedComplaints Int             @default(0)

  // Relations
  complaints        Complaint[]
  messagesSent      ChatMessage[]    @relation("StudentSentMessages")
  messagesReceived  ChatMessage[]    @relation("StudentReceivedMessages")
  activityLogs      ActivityLog[]
  notifications     Notification[]

  @@map("students")
}

// =========================================
//  COMPLAINT MODEL
// =========================================
model Complaint {
  id              String           @id @default(cuid())
  title           String
  description     String
  category        String
  status          ComplaintStatus  @default(PENDING)
  resolutionNote  String?
  feedback        String?
  dateSubmitted   DateTime         @default(now())
  dateResolved    DateTime?
  
  // Relations
  student         Student          @relation(fields: [studentId], references: [id])
  studentId       String
  assignedAdmin   Admin?           @relation(fields: [adminId], references: [id])
  adminId         String?

  @@map("complaints")
}

// =========================================
//  CHAT MESSAGE MODEL
// =========================================
model ChatMessage {
  id            String         @id @default(cuid())
  message       String
  attachments   String[]       @default([])
  timestamp     DateTime       @default(now())
  status        MessageStatus  @default(SENT)

  // Relations
  senderAdmin   Admin?         @relation("AdminSentMessages", fields: [senderAdminId], references: [id])
  senderAdminId String?

  receiverAdmin Admin?         @relation("AdminReceivedMessages", fields: [receiverAdminId], references: [id])
  receiverAdminId String?

  senderStudent   Student?     @relation("StudentSentMessages", fields: [senderStudentId], references: [id])
  senderStudentId String?

  receiverStudent Student?     @relation("StudentReceivedMessages", fields: [receiverStudentId], references: [id])
  receiverStudentId String?

  @@map("chat_messages")
}

// =========================================
//  NOTIFICATION MODEL
// =========================================
model Notification {
  id          String            @id @default(cuid())
  title       String
  message     String
  type        NotificationType  @default(INFO)
  isRead      Boolean           @default(false)
  createdAt   DateTime          @default(now())

  // Relations
  admin       Admin?            @relation(fields: [adminId], references: [id])
  adminId     String?
  student     Student?          @relation(fields: [studentId], references: [id])
  studentId   String?

  @@map("notifications")
}

// =========================================
//  ACTIVITY LOG MODEL
// =========================================
model ActivityLog {
  id          String    @id @default(cuid())
  action      String
  timestamp   DateTime  @default(now())
  ipAddress   String?

  // Relations
  admin       Admin?    @relation(fields: [adminId], references: [id])
  adminId     String?
  student     Student?  @relation(fields: [studentId], references: [id])
  studentId   String?

  @@map("activity_logs")
}

// =========================================
//  ADMIN ANALYTICS MODEL
// =========================================
model AdminAnalytics {
  id                  String   @id @default(cuid())
  totalStudents       Int      @default(0)
  totalComplaints     Int      @default(0)
  resolvedComplaints  Int      @default(0)
  pendingComplaints   Int      @default(0)
  activeStudents      Int      @default(0)
  suspendedStudents   Int      @default(0)
  avgResolutionTime   Float?
  lastUpdated         DateTime @default(now())

  // Relation
  adminId             String   @unique
  admin               Admin    @relation(fields: [adminId], references: [id])

  @@map("admin_analytics")
}
